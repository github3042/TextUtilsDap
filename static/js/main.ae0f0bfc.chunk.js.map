{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","Alert","style","height","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","capitlized","msg","Textform","useState","text","setText","color","heading","value","backgroundColor","border","textDecorationColor","onChange","event","target","rows","disabled","length","newText","showAlert","split","join","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","filter","element","defaultProps","aboutText","App","setmode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ae0f0bfc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {  NavLink } from 'react-router-dom'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <NavLink className=\"navbar-brand\" to=\"/\">{props.title}</NavLink> */}\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\"\r\n                 aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <NavLink className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</NavLink> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\"> */}\r\n                            {/* <NavLink className=\"nav-link\" to=\"/About\">{props.aboutText}</NavLink> */}\r\n                            {/* <a className=\"nav-link\" href=\"/About\">{props.aboutText}</a> */}\r\n                        {/* </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \" Set title hear \",\r\n    aboutText: \"About\"\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitlized = (word)=>{\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        <div style ={{height: '40px'}}>\r\n         { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitlized(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","// import { getByTitle } from '@testing-library/dom'\r\nimport React, { useState } from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"  :-> Wrong way to upadate \r\n\r\n    const handelUpclick = () => {\r\n        // console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\" Converted to UpperCase!\", \"success\")\r\n    }\r\n    const handelLowclick = (event) => {\r\n        // console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\" Converted to LowerCase!\", \"success\")\r\n    }\r\n\r\n    const handelClear = () => {\r\n        // console.log(\"Upperase was clicked\" + text);\r\n        let newText = \" \";\r\n        setText(newText);\r\n        props.showAlert(\" Text has been Cleared!\", \"success\")\r\n\r\n    }\r\n    const handelCopy = (event) => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\" Text has been Copied!\", \"success\")\r\n    }\r\n    const handelExtraSpaces = (event) => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\" Extra Spaces has been Removed!\", \"success\")\r\n    }\r\n\r\n    const handelOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container \" style={{ color: props.mode === 'dark' ? 'white' : '#000752' }}>\r\n                <div className=\"mb-3\">\r\n                    <h2 className = \"mb-2\">{props.heading}</h2>\r\n                    <textarea className=\"form-control\"  value={text} style={{\r\n                        backgroundColor: props.mode === 'dark' ? '#045F5F' : 'white',\r\n                        color: props.mode === 'dark' ? 'white' : '#000752',\r\n                        border:'2px solid black',\r\n                        textDecorationColor:'none'\r\n                    }} onChange={handelOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handelUpclick}>Convert to UpperCase</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handelLowclick}>Convert to LowerCase</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1 \" onClick={handelExtraSpaces}>Remove Extra Spaces</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1 \" onClick={handelClear}>Clear Text</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1 \" onClick={handelCopy}>Copy Text</button>\r\n            </div>\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'dark' ? 'white' : '#000752' }}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0 ? text:\"Nothing to preview..\"}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\n\n// React Router\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setmode] = useState('light') // whetthe dark mode is enable or not \n\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500)\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = '#151B54'\n      showAlert(\" Dark mode has been enabled\", \"success\")\n    }\n    else {\n      setmode('light');\n      document.body.style.backgroundColor = 'white'\n      showAlert(\" Light mode has been enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n\n      {/* <Navbar title = \"TextUtilse\" aboutText =\"About Text\"/>  */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtilse\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route exact path=\"/About\">\n            <About mode = {mode}/>\n          </Route> */}\n          {/* <Route exact path=\"/\">  */}\n        <Textform showAlert = {showAlert} heading=\"TextUtils- Word Counter, Character Counter, Remove Extra Spaces\"  mode = {mode} />\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}