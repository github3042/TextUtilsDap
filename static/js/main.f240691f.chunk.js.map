{"version":3,"sources":["components/About.js","components/Navbar.js","components/Alert.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","href","title","onClick","toggleMode","role","htmlFor","Alert","height","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","capitlized","msg","Textform","useState","text","setText","heading","value","border","textDecorationColor","onChange","event","target","rows","disabled","length","newText","showAlert","split","join","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","filter","element","defaultProps","aboutText","App","setmode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f240691f.chunk.js","sourcesContent":["import React   from 'react'\r\nexport default function About(props) {\r\n\r\n\r\n    let myStyle ={\r\n        color: props.mode === 'dark'?'white':'black',\r\n        backgroundColor: props.mode ==='dark'?'#04232C':'white',\r\n        // border: '1.5px solid',\r\n        // borderColor: props.mode === 'dark'?'white':'black'\r\n    }\r\n\r\n    // const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container my-3\">\r\n            <h1 className=\"my-3\" style = {{color: props.mode === 'dark'?'white':'black'}}>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        <strong>Analyze your text</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default,\r\n                            until the collapse plugin adds the appropriate classNamees that we use to style each element.\r\n                            These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions.\r\n                            You can modify any of this with custom CSS or overriding our default variables.\r\n                            It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        <strong> Free to use</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin\r\n                            adds the appropriate classNamees that we use to style each element. These classNamees control the overall\r\n                            appearance, as well as the showing and hiding via CSS transitions.\r\n                            You can modify any of this with custom CSS or overriding our default variables.\r\n                            It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        <strong>Browser Compatible</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default,\r\n                            until the collapse plugin adds the appropriate classNamees that we use to style each element.\r\n                            These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions.\r\n                            You can modify any of this with custom CSS or overriding our default variables.\r\n                            It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"container my-3\">\r\n                <button type=\"button\" onClick={toggleStyle} class=\"btn btn-primary\">{btntext}</button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {  NavLink } from 'react-router-dom'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <NavLink className=\"navbar-brand\" to=\"/\">{props.title}</NavLink> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\"\r\n                 aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <NavLink className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</NavLink> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\"> */}\r\n                            {/* <NavLink className=\"nav-link\" to=\"/About\">{props.aboutText}</NavLink> */}\r\n                            {/* <a className=\"nav-link\" href=\"/About\">{props.aboutText}</a> */}\r\n                        {/* </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \" Set title hear \",\r\n    aboutText: \"About\"\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitlized = (word)=>{\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        <div style ={{height: '40px'}}>\r\n         { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitlized(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","// import { getByTitle } from '@testing-library/dom'\r\nimport React, { useState } from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"  :-> Wrong way to upadate \r\n\r\n    const handelUpclick = () => {\r\n        // console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\" Converted to UpperCase!\", \"success\")\r\n    }\r\n    const handelLowclick = (event) => {\r\n        // console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\" Converted to LowerCase!\", \"success\")\r\n    }\r\n\r\n    const handelClear = () => {\r\n        // console.log(\"Upperase was clicked\" + text);\r\n        let newText = \" \";\r\n        setText(newText);\r\n        props.showAlert(\" Text has been Cleared!\", \"success\")\r\n\r\n    }\r\n    const handelCopy = (event) => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\" Text has been Copied!\", \"success\")\r\n    }\r\n    const handelExtraSpaces = (event) => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\" Extra Spaces has been Removed!\", \"success\")\r\n    }\r\n\r\n    const handelOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container \" style={{ color: props.mode === 'dark' ? 'white' : '#000752' }}>\r\n                <div className=\"mb-3\">\r\n                    <h2 className = \"mb-2\">{props.heading}</h2>\r\n                    <textarea className=\"form-control\"  value={text} style={{\r\n                        backgroundColor: props.mode === 'dark' ? '#045F5F' : 'white',\r\n                        color: props.mode === 'dark' ? 'white' : '#000752',\r\n                        border:'2px solid black',\r\n                        textDecorationColor:'none'\r\n                    }} onChange={handelOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handelUpclick}>Convert to UpperCase</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handelLowclick}>Convert to LowerCase</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1 \" onClick={handelExtraSpaces}>Remove Extra Spaces</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1 \" onClick={handelClear}>Clear Text</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-1 my-1 \" onClick={handelCopy}>Copy Text</button>\r\n            </div>\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'dark' ? 'white' : '#000752' }}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0 ? text:\"Nothing to preview..\"}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\n\n// React Router\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setmode] = useState('light') // whetthe dark mode is enable or not \n\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500)\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = '#151B54'\n      showAlert(\" Dark mode has been enabled\", \"success\")\n    }\n    else {\n      setmode('light');\n      document.body.style.backgroundColor = 'white'\n      showAlert(\" Light mode has been enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <div> */}\n      {/* <Navbar title = \"TextUtilse\" aboutText =\"About Text\"/>  */}\n      <Router>\n      <Navbar title=\"TextUtilse\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Switch>\n          <Route exact path=\"/About\">\n            <About mode = {mode}/>\n          </Route>\n          <Route exact path=\"/\"> \n        <Textform showAlert = {showAlert} heading=\"TextUtils- Word Counter, Character Counter, Remove Extra Spaces\"  mode = {mode} />\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}